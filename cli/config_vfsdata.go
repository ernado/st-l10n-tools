// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 30, 18, 9, 20, 464748623, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2019, 7, 30, 18, 9, 20, 260747650, time.UTC),
			uncompressedSize: 1513,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xdb\x30\x0c\xc7\xef\x7a\x0a\x22\xb9\xd6\xce\x76\x35\xb0\xc3\x90\x8f\x35\x4b\xd1\x05\x89\x8b\x9e\x59\x9b\xb6\xd5\xc8\x92\x21\xd1\xe9\xc7\x23\xed\x35\xf6\x62\x83\x9c\x54\x72\xd1\x2d\xbd\x49\xe2\x8f\xd4\x5f\xf4\xdf\x9c\xc2\xdc\xe8\x4a\xd6\xbd\x45\x96\x46\x43\x65\x2c\xb4\x68\x59\xa2\xbe\x02\x36\x46\x0d\x27\x7b\x1e\xa2\x44\xd6\x81\x32\x05\x2a\xf9\x3a\x1c\xa4\x62\x0a\x7b\x22\x68\x98\x3b\x97\xcd\x66\xb5\xe4\xa6\x7f\x48\x0b\xd3\xce\x1c\x27\xea\xeb\x17\x3d\x3b\x17\x1b\xca\x58\xaa\xc8\x92\x2e\x28\x15\x62\x0a\x37\xd2\x31\x98\x0a\xf0\x88\x52\xe1\x83\x22\x50\xa8\xeb\x1e\x6b\x72\xa9\x08\xcb\x4c\x24\x50\x98\x92\x32\xd8\xdd\x09\x00\x8d\xad\x5f\xf6\xce\x49\xd4\x02\xa0\x32\x9a\x33\xb0\xe7\x7d\x60\x97\xb7\x81\x5d\xea\x5a\x49\xd7\x04\x96\xce\xfb\xc0\xae\x76\x81\x5d\x79\x75\x23\xf4\x99\x49\x97\x54\x46\x76\xb1\x0c\xec\x0f\xb2\xed\x48\xc2\x47\x76\x9d\x07\x76\xcd\xa8\xe4\x45\x78\x13\x05\xff\xc4\x0e\x35\x39\x0a\x74\xf1\x78\x10\x70\xea\x3b\x65\xf0\x88\xa3\xac\x5f\x21\x6b\x63\x2c\x8d\x6e\x68\x7c\xff\x54\x24\xb7\x37\x81\xdc\x9a\x77\xfd\xf8\xd0\xbb\x6d\x3e\x42\x2d\xf7\x75\xff\xe7\xb7\x13\x00\x9d\xa5\x4a\x3e\x67\xd0\x9d\x0e\x4f\x0a\xdf\x54\x75\x9c\x6c\xf3\x58\x63\x1e\x9f\xb3\x97\x6d\xa7\x64\x25\xa9\x84\x79\x23\x2f\x3c\xec\xb5\x49\xe6\xb7\xb1\x44\x7e\x1f\x4a\xe4\x16\x4b\xe9\xfd\x86\x6a\x54\xe3\x4d\x0f\xc7\x68\x52\x7c\x76\x43\x7e\xef\xad\xb7\x92\x5a\xfb\x1e\x04\x0b\xac\xa3\xdc\xde\xb4\x32\xaa\xd8\x6f\x62\x44\x99\x23\x1e\xfe\xdf\xb7\xf9\x3e\xa0\xf3\x57\x2a\x2e\x74\x78\x19\xc9\x7d\x87\xfa\x9d\x3b\x3f\x38\x23\x8f\xf6\xcc\x7b\x7b\xb8\xf8\xe9\x16\xdf\x03\xbb\xf8\xac\xee\x6d\x74\xc4\xa2\xe7\x8b\xae\xbf\x8e\x7f\xde\x75\xaf\x6b\xb4\x17\xff\xbd\x5d\x34\xe5\xce\xb4\xa8\xff\x6d\xfc\xe9\xd8\x18\x6c\x51\x3b\x75\x9a\x40\x1d\x5a\x76\x7e\xb0\xac\x2b\x70\x01\xb9\x02\x6e\x08\x26\xad\xab\x65\x39\x81\x23\xaa\x9e\xfc\xec\x18\x27\x4a\x07\x8e\x18\xd8\x8c\xd2\xc4\x14\x2c\xf9\xf8\x91\xa0\x43\x6e\xc6\x39\x54\x02\x29\x6a\x49\xf3\x15\x68\xc3\xc3\x05\xc6\xca\x5a\x7a\x9b\x31\x3d\x73\x2a\xa6\xc3\x98\x3a\xd0\x30\xbd\x76\x84\x35\x69\x76\xb3\x1d\x15\xc6\x96\xe7\x2d\x3c\x49\x6e\x60\x43\x2f\xdf\x56\xca\xf4\xf6\xa4\x53\x96\x43\xc6\x9d\x96\x3e\xae\x14\x3c\x10\x4c\x86\x78\xea\xcf\x26\x62\x0a\x52\x3b\x26\x2c\xbd\xa0\x49\x3d\x39\x5d\x95\xfb\x27\xe6\xb2\x73\x93\xa1\x0b\xfe\x45\xa8\x9e\xf0\xc5\x01\x3a\xd7\xb7\x54\x02\x3a\xd0\x46\x27\xf1\x81\xa9\x88\xeb\x4c\x00\x24\x41\xe6\x70\xd3\x70\xb2\xa1\x17\x27\xfe\x06\x00\x00\xff\xff\xa0\x91\x8c\x65\xe9\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
