// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 9, 24, 11, 14, 21, 153954187, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2018, 9, 24, 9, 38, 27, 0, time.UTC),
			uncompressedSize: 1290,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x6f\xa3\x4a\x0c\xc7\xef\xf3\x57\x58\x70\x2d\xe4\xbd\x2b\xd2\x3b\xe5\x25\xab\x6c\xaa\x6e\x94\x50\xf5\xec\x82\x01\xb7\xc3\x0c\x9a\x31\xe9\x8f\xbf\x7e\x35\x24\x1d\x58\x75\xb7\x7b\x63\xec\x8f\xed\xaf\x8d\x9d\xc2\xda\x9a\x86\xdb\xd1\xa1\xb0\x35\xd0\x58\x07\x3d\x3a\x61\x34\x37\x20\xd6\xea\xc9\x72\x92\xc9\x4b\xe4\x3c\x68\x5b\xa1\xe6\xf7\xc9\x90\xab\x14\x4e\x44\xd0\x89\x0c\xbe\x58\xad\x5a\x96\x6e\x7c\xcc\x2b\xdb\xaf\xbc\x64\xfa\xdf\x7f\xcc\xea\x9a\x6c\x4a\xe3\xa8\x21\x47\xa6\xa2\x5c\xa9\x14\x6e\xd9\x0b\xd8\x06\xf0\x8c\xac\xf1\x51\x13\x68\x34\xed\x88\x2d\xf9\x5c\xc5\xcf\x42\x65\x50\xd9\x9a\x0a\x38\xde\x2b\x00\x83\x7d\xf8\x1c\xbd\x67\x34\x0a\xa0\xb1\x46\x0a\x70\xd7\x77\x64\x37\x77\x91\xdd\x98\x56\xb3\xef\x22\x4b\xd7\x77\x64\xb7\xc7\xc8\x6e\x83\xba\x05\xfa\x2a\x64\x6a\xaa\x67\xf6\xff\x4d\x64\xbf\x91\xeb\x17\x12\x3e\xb3\xbb\x32\xb2\x3b\x41\xcd\x5f\xc2\xfb\x59\xf0\x77\x1c\xd0\x90\xa7\x48\x57\x4f\xcf\x0a\x2e\x73\xa7\x02\x9e\x70\x11\xf5\x23\x46\xed\xad\xa3\x45\x85\x2e\xcc\x4f\xcf\xe4\xe1\x36\x92\x07\xfb\xeb\x3c\x3e\x69\x39\x94\x0b\xd6\xc9\xd8\x92\x57\x00\x83\xa3\x86\x5f\x0b\x18\x26\xd3\x78\x11\xf8\x21\x6a\x90\xec\x50\xce\x19\xd6\x73\x37\x27\xee\x07\xcd\x0d\x53\x0d\xeb\x8e\xbf\xe8\xeb\xbd\xcb\xd6\x77\x73\x8a\xf2\x21\xa6\x28\x1d\xd6\x1c\xd6\x0d\xf5\x22\xc7\x87\x1e\x99\xbd\x59\xf5\xb7\x0a\xe5\x43\xd8\xbc\x2d\x1b\x13\x46\x10\x37\x60\x37\xcb\x1d\x6d\xcf\xb3\x8a\xd3\x7e\xf6\x68\x7b\xc6\xe7\x3f\xaf\xdc\xfa\x14\xd1\xf5\x3b\x7d\xb9\x45\x9b\x19\x3d\x0d\x68\x7e\xff\x37\xd2\xe5\xe8\xc4\xa1\xf1\xfa\x72\xa2\x03\x3a\xf1\xe1\xf2\x76\x0d\xf8\x88\xdc\x80\x74\x04\x49\xef\x5b\xae\x13\x38\xa3\x1e\x29\x1c\xd7\x32\x90\x3d\x78\x12\x10\xbb\x08\x53\x29\x38\x0a\xfe\x33\xc1\x80\xd2\x2d\x63\xa8\x06\xd2\xd4\x93\x91\x1b\x30\x56\xa6\x02\xd6\x71\xcb\xe1\x47\x08\xbd\x4a\xae\xd2\xe9\x8e\x9f\x69\x3a\xef\x23\x61\x4b\x46\xfc\xea\x48\x95\x75\xf5\xf5\x09\x2f\x2c\x1d\xec\xe9\xed\xbf\xad\xb6\xa3\xbb\xe8\xe4\x7a\x8a\xb8\x37\x1c\xfc\x5a\xc3\x23\x41\x32\xf9\xf3\x60\x4b\x54\x0a\x6c\xbc\x10\xd6\x41\x50\xd2\x26\x97\x52\x65\x68\xb1\xe4\xc1\x27\xd3\x14\x42\x47\xa8\x5f\xf0\xcd\x03\x7a\x3f\xf6\x54\x03\x7a\x30\xd6\x64\x73\x83\xb9\x9a\xbf\x0b\x05\x90\x45\x99\x53\xa5\xc9\xb2\xa7\x37\xaf\x7e\x06\x00\x00\xff\xff\xaf\xe7\x0b\x4a\x0a\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
