// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 19, 13, 47, 48, 585823198, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2018, 12, 19, 13, 47, 48, 569823123, time.UTC),
			uncompressedSize: 1379,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xdb\x30\x0c\xc7\xef\x7a\x0a\xc2\xbe\xd6\xce\x76\x35\xb0\xc3\x90\x36\x43\x96\xa2\x0b\x12\x17\x3d\xb3\x36\x6d\xab\x91\x25\x43\xa2\xd3\x8f\x47\xda\x6b\xec\xc5\x06\x39\xa9\xe4\x21\x68\x77\xb3\xc8\x1f\xc9\x3f\x29\xca\x29\x2c\x8d\x6e\x64\x3b\x5a\x64\x69\x34\x34\xc6\x42\x8f\x96\x25\xea\x2b\x60\x63\xd4\x64\xd9\xf3\xe4\x25\xb2\x0e\x94\xa9\x50\xc9\xb7\xc9\x90\x8b\x14\xf6\x44\xd0\x31\x0f\xae\x58\x2c\x5a\xc9\xdd\xf8\x98\x57\xa6\x5f\x38\xce\xd4\xd7\x2f\x7a\x71\x4e\x36\xa5\xb1\xd4\x90\x25\x5d\x51\x2e\x44\x0a\xb7\xd2\x31\x98\x06\xf0\x88\x52\xe1\xa3\x22\x50\xa8\xdb\x11\x5b\x72\xb9\x08\x9f\x85\xc8\xa0\x32\x35\x15\xb0\xbb\x17\x00\x1a\x7b\xff\x39\x3a\x27\x51\x0b\x80\xc6\x68\x2e\xc0\x9e\xcf\x81\xbd\xb9\x0b\xec\x8d\x6e\x95\x74\x5d\x60\xe9\x7c\x0e\xec\x6a\x17\xd8\x95\x57\x37\x43\x5f\x98\x74\x4d\x75\x64\xaf\x6f\x02\xfb\x83\x6c\x3f\x93\x70\xc9\xae\xcb\xc0\xae\x19\x95\xfc\x14\xde\x44\xc1\x3f\x71\x40\x4d\x8e\x02\x5d\x3d\x1d\x04\x9c\xe6\x4e\x05\x3c\xe1\x2c\xea\x57\x88\xda\x18\x4b\xb3\x0a\x9d\x9f\x9f\x8a\xe4\xf6\x36\x90\x5b\xf3\xef\x3c\x2e\xb4\x6c\xcb\x19\x6b\x79\x6c\xc7\x3f\xbf\x9d\x00\x18\x2c\x35\xf2\xa5\x80\xe1\x64\x3c\x49\x7c\x97\x35\x70\xb6\x2d\x63\x8e\x65\xec\x67\x2f\xfb\x41\xc9\x46\x52\x0d\xcb\x4e\x7e\xd2\xd9\x5b\x97\x2d\xef\x62\x8a\xf2\x21\xa4\x28\x2d\xd6\xd2\x2f\x1c\xaa\x59\x8e\x77\x3d\x1c\xbd\x59\xf5\xbf\x0a\xe5\x83\xdf\xbd\x95\xd4\xda\x0f\x21\xec\xc0\x3a\xca\x1d\x4d\x2f\xa3\x8a\xfd\x26\x7a\x94\x39\xe2\xe1\xe3\xa5\x5b\xee\x03\xba\x7c\xa3\xd9\x1e\x5d\xae\x67\x24\xf7\x03\xea\xcf\xaf\xa3\x8c\xfb\x59\x8e\xf6\x30\x87\x2f\x12\x5f\x7f\x0f\xec\xf5\x47\x79\xd3\xf9\x8d\xb0\x45\xed\xd4\xe9\xed\x0f\x68\xd9\xf9\x27\xbd\x6e\xc0\x05\xe4\x0a\xb8\x23\x48\x7a\xd7\xca\x3a\x81\x23\xaa\x91\xfc\xab\x9d\x07\x4a\x07\x8e\x18\xd8\xcc\xc2\x44\x0a\x96\xbc\xff\x48\x30\x20\x77\xf3\x18\xaa\x81\x14\xf5\xa4\xf9\x0a\xb4\xe1\xa9\x80\xb1\xb2\x95\xfe\x7e\x99\x5e\x38\x17\xe9\xf4\x83\x38\xd0\xf4\xdf\xd8\x11\xb6\xa4\xd9\x2d\x76\x54\x19\x5b\x9f\x8f\xf0\x2c\xb9\x83\x0d\xbd\x7e\x5b\x29\x33\xda\x93\x4e\x59\x4f\x11\xf7\x5a\x7a\xbf\x52\xf0\x48\x90\x4c\xfe\xdc\xdb\x12\x91\x82\xd4\x8e\x09\x6b\x2f\x28\x69\x93\x53\xa9\xd2\xb7\x58\xca\xc1\x25\xd3\x14\x7c\x47\xa8\x9e\xf1\xd5\x01\x3a\x37\xf6\x54\x03\x3a\xd0\x46\x67\xb1\xc1\x5c\xc4\xef\x42\x00\x64\x41\xe6\x54\x69\xb2\x6c\xe8\xd5\x89\xbf\x01\x00\x00\xff\xff\x13\x50\xd1\x7a\x63\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
