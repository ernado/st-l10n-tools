// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 2, 22, 14, 36, 23, 952593948, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2019, 2, 22, 14, 36, 23, 592589130, time.UTC),
			uncompressedSize: 1514,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe3\x38\x0c\xc6\xef\x7a\x0a\x22\xbe\xd6\xce\xee\xd5\xc0\x1e\x16\x49\xb3\xcd\xa6\xe8\x04\x89\x8b\x9e\x59\x9b\xb6\xd5\xc8\x92\x21\xd1\xe9\x9f\x47\x9a\xd7\x98\x17\x1b\xc8\x49\x25\x0f\x32\x93\xde\x24\xf1\x47\xea\x13\xfd\x99\x09\x2c\x8c\xae\x65\x33\x58\x64\x69\x34\xd4\xc6\x42\x87\x96\x25\xea\x1b\x60\x63\xd4\x78\xb2\xe7\x31\x4a\x64\x1d\x28\x53\xa2\x92\x1f\xe3\x41\x26\x12\xd8\x13\x41\xcb\xdc\xbb\x7c\x3e\x6f\x24\xb7\xc3\x73\x56\x9a\x6e\xee\x38\x55\x7f\xff\xa5\xe7\xe7\x62\x63\x19\x4b\x35\x59\xd2\x25\x65\x42\x24\x70\x2f\x1d\x83\xa9\x01\x8f\x28\x15\x3e\x2b\x02\x85\xba\x19\xb0\x21\x97\x89\xb0\xcc\x45\x0a\xa5\xa9\x28\x87\xdd\xa3\x00\xd0\xd8\xf9\xe5\xe0\x9c\x44\x2d\x00\x6a\xa3\x39\x07\x7b\xde\x07\xf6\xf6\x21\xb0\xb7\xba\x51\xd2\xb5\x81\xa5\xf3\x3e\xb0\xab\x5d\x60\x57\x5e\xdd\x04\x7d\x63\xd2\x15\x55\x91\x5d\xde\x06\xf6\x3f\xb2\xdd\x44\xc2\x25\xbb\x2e\x02\xbb\x66\x54\xf2\x2a\xbc\x89\x82\xff\xc7\x1e\x35\x39\x0a\x74\xf9\x72\x10\x70\xea\x3b\xe5\xf0\x82\x93\xac\x6f\x21\x6b\x63\x2c\x4d\x6e\x68\x7d\xff\x54\x24\xb7\xf7\x81\xdc\x9a\x5f\xfb\x71\xa1\x65\x5b\x4c\x58\xcb\x43\x33\xfc\xf8\xee\x04\x40\x6f\xa9\x96\x6f\x39\xf4\xa7\xc3\x93\xc4\x4f\x59\x3d\xa7\xdb\x22\xd6\x58\xc4\xf7\xec\x65\xd7\x2b\x59\x4b\xaa\x60\xd1\xca\x2b\x2f\xfb\x68\xd3\xc5\x43\x2c\x51\x3c\x85\x12\x85\xc5\x4a\x7a\xc3\xa1\x9a\xd4\xf8\xd4\xc3\x31\x9a\x96\x5f\xdd\x50\x3c\x79\xef\xad\xa4\xd6\xbe\x09\xc1\x03\xeb\x28\x77\x30\x9d\x8c\x2a\xf6\x9b\x18\x51\xe6\x88\x87\x3f\x9b\x6e\xb1\x0f\xe8\xe2\x83\x26\x3e\xba\xb4\x67\x24\xf7\x3d\xea\xeb\x9f\xa3\x88\xfe\x2c\x06\x7b\x98\xc2\x17\x85\x97\xff\x06\x76\xf9\x55\xdd\x87\x68\x89\xe5\xc0\x57\x6d\x7f\x17\x7f\xbd\xbb\x41\x37\x68\xaf\xfe\x7c\xbb\xe8\xca\x9d\xe9\x50\xff\xde\xf9\xc9\xd4\x18\x6c\x51\x3b\x75\x1a\x41\x3d\x5a\x76\x7e\xb2\xac\x6b\x70\x01\xb9\x01\x6e\x09\x66\x9d\x6b\x64\x35\x83\x23\xaa\x81\xfc\xf0\x98\x26\x4a\x07\x8e\x18\xd8\x4c\xd2\x44\x02\x96\x7c\xfc\x48\xd0\x23\xb7\xd3\x1c\xaa\x80\x14\x75\xa4\xf9\x06\xb4\xe1\xf1\x02\x63\x65\x23\xbd\xcd\x98\xde\x38\x13\xc9\x38\xa7\x0e\x34\x8e\xaf\x1d\x61\x43\x9a\xdd\x7c\x47\xa5\xb1\xd5\x79\x0b\xaf\x92\x5b\xd8\xd0\xfb\x3f\x2b\x65\x06\x7b\xd2\x29\xab\x31\xe3\x51\x4b\x1f\x57\x0a\x9e\x09\x66\x63\x3c\xf3\x67\x33\x91\x80\xd4\x8e\x09\x2b\x2f\x68\xd6\xcc\x4e\x57\x15\xfe\x89\x85\xec\xdd\x6c\xec\x82\x7f\x11\xaa\x57\x7c\x77\x80\xce\x0d\x1d\x55\x80\x0e\xb4\xd1\x69\x7c\x60\x26\xe2\x3a\x17\x00\x69\x90\x39\xde\x34\x9e\x6c\xe8\xdd\x89\x9f\x01\x00\x00\xff\xff\xd8\x39\xd1\x4d\xea\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
