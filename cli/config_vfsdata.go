// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 17, 13, 46, 0, 893352623, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2019, 1, 17, 13, 46, 0, 637351245, time.UTC),
			uncompressedSize: 1422,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe3\x38\x0c\xc6\xef\x7a\x0a\xc2\xbe\xd6\xce\xee\xd5\xc0\x1e\x16\x49\xb3\xc8\xa6\xe8\x04\x89\x8b\x9e\x59\x9b\xb6\xd5\xc8\x92\x21\xd1\xe9\x9f\x47\x9a\xd7\x98\x17\x1b\xc8\x49\x25\x0f\x32\xd3\xde\x24\xf1\x47\xea\x23\xfd\x59\x29\x2c\x8d\x6e\x64\x3b\x5a\x64\x69\x34\x34\xc6\x42\x8f\x96\x25\xea\x1b\x60\x63\xd4\x74\x72\xe0\x29\x4a\x64\x1d\x28\x53\xa1\x92\xef\xd3\x41\x2e\x52\x38\x10\x41\xc7\x3c\xb8\x62\xb1\x68\x25\x77\xe3\x53\x5e\x99\x7e\xe1\x38\x53\x7f\xff\xa5\x17\x97\x62\x53\x19\x4b\x0d\x59\xd2\x15\xe5\x42\xa4\x70\x27\x1d\x83\x69\x00\x4f\x28\x15\x3e\x29\x02\x85\xba\x1d\xb1\x25\x97\x8b\xb0\x2c\x44\x06\x95\xa9\xa9\x80\xfd\x83\x00\xd0\xd8\xfb\xe5\xe8\x9c\x44\x2d\x00\x1a\xa3\xb9\x00\x7b\xd9\x07\xf6\xf6\x3e\xb0\xb7\xba\x55\xd2\x75\x81\xa5\xcb\x3e\xb0\xeb\x7d\x60\xd7\x5e\xdd\x0c\x7d\x65\xd2\x35\xd5\x91\x5d\xdd\x06\xf6\x3f\xb2\xfd\x4c\xc2\x35\xbb\x29\x03\xbb\x61\x54\xf2\x53\x78\x1b\x05\xff\x8f\x03\x6a\x72\x14\xe8\xea\xf9\x28\xe0\x3c\x77\x2a\xe0\x19\x67\x59\xdf\x42\xd6\xd6\x58\x9a\xdd\xd0\xf9\xf9\xa9\x48\xee\xee\x02\xb9\x33\xbf\xce\xe3\x4a\xcb\xae\x9c\xb1\x96\xc7\x76\xfc\xf1\xdd\x09\x80\xc1\x52\x23\x5f\x0b\x18\xce\x87\x67\x89\x1f\xb2\x06\xce\x76\x65\xac\xb1\x8c\xfd\x1c\x64\x3f\x28\xd9\x48\xaa\x61\xd9\xc9\x4f\x3a\x7b\xef\xb2\xe5\x7d\x2c\x51\x3e\x86\x12\xa5\xc5\x5a\x7a\xc3\xa1\x9a\xd5\xf8\xd0\xc3\x31\x9a\x55\x5f\xdd\x50\x3e\x7a\xef\xad\xa5\xd6\x7e\x08\xc1\x03\x9b\x28\x77\x34\xbd\x8c\x2a\x0e\xdb\x18\x51\xe6\x84\xc7\x3f\x9b\x6e\x79\x08\xe8\xf2\x9d\x66\x3e\xba\xb6\x67\x24\x0f\x03\xea\xcf\x3f\x47\x19\xfd\x59\x8e\xf6\x38\x87\xaf\x0a\xaf\xfe\x0d\xec\xea\xab\xba\xf7\xd1\x12\xab\x91\x7f\x6b\xfb\x74\xfe\xf1\xd8\xa2\x76\xea\xfc\x4c\x0c\x68\xd9\xf9\xbf\x7f\xd3\x80\x0b\xc8\x0d\x70\x47\x90\xf4\xae\x95\x75\x02\x27\x54\x23\xf9\x1f\x7c\x9e\x28\x1d\x38\x62\x60\x33\x4b\x13\x29\x58\xf2\xf1\x13\xc1\x80\xdc\xcd\x73\xa8\x06\x52\xd4\x93\xe6\x1b\xd0\x86\xa7\x0b\x8c\x95\xad\xf4\x56\x60\x7a\xe5\x5c\xa4\xd3\x5b\x72\xa4\xe9\x89\xd9\x13\xb6\xa4\xd9\x2d\xf6\x54\x19\x5b\x5f\xb6\xf0\x22\xb9\x83\x2d\xbd\xfd\xb3\x56\x66\xb4\x67\x9d\xb2\x9e\x32\x1e\xb4\xf4\x71\xa5\xe0\x89\x20\x99\xe2\xb9\x3f\x4b\x44\x0a\x52\x3b\x26\xac\xbd\xa0\xa4\x4d\xce\x57\x95\xbe\xc5\x52\x0e\x2e\x99\xa6\xe0\x3b\x42\xf5\x82\x6f\x0e\xd0\xb9\xb1\xa7\x1a\xd0\x81\x36\x3a\x8b\x0d\xe6\x22\xae\x0b\x01\x90\x05\x99\xd3\x4d\xd3\xc9\x96\xde\x9c\xf8\x19\x00\x00\xff\xff\x24\xcf\x8a\x3d\x8e\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
