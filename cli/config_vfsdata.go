// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 8, 10, 16, 51, 22, 798413337, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2020, 8, 10, 16, 51, 22, 786413090, time.UTC),
			uncompressedSize: 1601,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcb\x72\xe2\x3a\x10\xdd\xeb\x2b\xba\x60\x1b\xc3\xbd\x5b\xaa\xee\xe2\x86\xc7\x84\x21\x95\xa1\xc0\xa9\xac\x1b\xbb\x6d\x2b\xc8\x92\x4b\x6a\x93\x84\x4f\x9a\xdf\x98\x1f\x9b\x92\x01\xc9\x29\x66\xc8\xce\xea\x3e\x7d\xfa\xa8\x7d\xd4\x43\x98\x1a\x5d\xc8\xb2\xb5\xc8\xd2\x68\x28\x8c\x85\x1a\x2d\x4b\xd4\x77\xc0\xc6\xa8\x2e\xb2\xe5\x2e\x4b\x64\x1d\x28\x93\xa1\x92\xc7\x2e\x30\x12\x43\xd8\x12\x41\xc5\xdc\xb8\xc9\x78\x5c\x4a\xae\xda\xdd\x28\x33\xf5\xd8\x71\xa2\xfe\xfd\x47\x8f\xcf\x64\x1d\x8d\xa5\x82\x2c\xe9\x8c\x46\x42\x0c\xe1\x51\x3a\x06\x53\x00\x1e\x50\x2a\xdc\x29\x02\x85\xba\x6c\xb1\x24\x37\x12\xe1\x73\x22\x12\xc8\x4c\x4e\x13\xd8\x3c\x0b\x00\x8d\xb5\xff\x6c\x9d\x93\xa8\x05\x40\x61\x34\x4f\xc0\x9e\xcf\x01\x3b\x7f\x0a\xd8\xb9\x2e\x95\x74\x55\xc0\xd2\xf9\x1c\xb0\x8b\x4d\xc0\x2e\xbc\xba\x1e\xf4\x9d\x49\xe7\x94\x47\xec\x6c\x1e\xb0\xdf\xc8\xd6\x3d\x09\xd7\xd8\x65\x1a\xb0\x4b\x46\x25\x6f\x82\x57\x51\xf0\x77\x6c\x50\x93\xa3\x80\xce\x5e\xf7\x02\x4e\x73\xa7\x09\xbc\x62\xaf\xea\x47\xa8\x5a\x19\x4b\xbd\x0e\x95\x9f\x9f\x8a\xc8\xf5\x63\x40\xae\xcd\xa7\x79\x5c\xcd\x6e\x9d\xf6\xa0\x96\xdb\xb2\xfd\xf5\xd3\x09\x80\xc6\x52\x21\xdf\x27\xd0\x9c\x82\x27\x85\x17\x55\x0d\x27\xeb\xb4\xc7\x71\x1f\x38\xee\x2d\x1e\xa5\xbf\xfd\x85\xed\x54\x78\xcd\x96\xec\x2e\xc8\xcf\xbc\xf7\x9b\xc8\x3b\x8d\x63\xda\xca\xba\x51\xb2\x90\x94\xc3\xb4\x92\x37\x06\x76\xac\x92\xe9\x53\xa4\x48\x5f\x02\x45\x6a\x31\x97\xde\xc7\xa8\x7a\x1c\x17\x65\x1c\xb3\x49\xf6\x55\x87\xf4\xc5\x5b\x7a\x21\xb5\xf6\xb3\x0d\xd6\x5a\x46\xb9\xad\xa9\x65\x54\xb1\x5d\xc5\x8c\x32\x07\xdc\xff\xfd\x7f\x4c\xb7\x01\x3a\x3d\x52\x76\xe3\xcf\xcd\x23\x72\xdb\xa0\xfe\xe4\xfa\x2b\xc7\xa5\xd1\xf6\x69\x6b\xf7\x37\x2d\x31\xfb\x3f\x60\x67\x5f\xf1\x3e\x45\xa7\xcd\x5a\xbe\xf9\x9a\x1e\xe2\x8b\x7e\x68\x75\x89\xf6\xe6\x9b\xde\x44\xb3\x6f\x4c\x8d\xfa\xcf\x0f\x6a\xd8\x37\x06\x5b\xd4\x4e\x9d\x36\x5b\x83\x96\x9d\x5f\x58\xcb\x02\x5c\x80\xdc\x01\x57\x04\x83\xda\x95\x32\x1f\xc0\x01\x55\x4b\x7e\x27\xf5\x0b\xa5\x03\x47\x0c\x6c\x7a\x65\x62\x08\x96\x7c\xfe\x40\xd0\x20\x57\xfd\x1a\xca\x81\x14\xd5\xa4\xf9\x0e\xb4\xe1\xae\x81\xb1\xb2\x94\xde\x66\x4c\xef\x3c\x12\xc3\x6e\xfd\xed\xa9\xdb\x8a\x1b\xc2\x92\x34\xbb\xf1\x86\x32\x63\xf3\xf3\x11\xde\x24\x57\xb0\xa2\x8f\xff\x16\xca\xb4\xf6\xa4\x53\xe6\x5d\xc5\xb3\x96\x3e\xaf\x14\xec\x08\x06\x5d\x7e\xe4\x63\x03\x31\x04\xa9\x1d\x13\xe6\x5e\xd0\xa0\x1c\x9c\x5a\xa5\xfe\x8a\xa9\x6c\xdc\xa0\x9b\x82\xbf\x11\xaa\x37\xfc\x70\x80\xce\xb5\x35\xe5\x80\x0e\xb4\xd1\x49\xbc\xe0\x48\xc4\xef\x89\x00\x48\x82\xcc\xae\x53\x17\x59\xd1\x87\x13\xbf\x03\x00\x00\xff\xff\x8b\x7b\x91\x61\x41\x06\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
