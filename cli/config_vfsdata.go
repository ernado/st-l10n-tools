// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 6, 13, 21, 50, 562365589, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2018, 12, 6, 13, 21, 50, 554365549, time.UTC),
			uncompressedSize: 1333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfa\x14\x44\x72\xad\x9d\xe7\xb9\x1a\xd8\x29\x6b\x86\x2c\x45\x17\x24\x2e\x7a\x66\x6d\xda\x66\x23\x4b\x86\x44\xa7\x2f\x9f\x7e\x90\x93\x4a\x1e\x8a\x75\x37\x89\xfc\x91\xfc\x93\xa6\xbc\x84\xb5\x35\x0d\xb7\xa3\x43\x61\x6b\xa0\xb1\x0e\x7a\x74\xc2\x68\x6e\x40\xac\xd5\x93\xe5\x28\x93\x97\xc8\x79\xd0\xb6\x42\xcd\xef\x93\x21\x57\x4b\x38\x12\x41\x27\x32\xf8\x62\xb5\x6a\x59\xba\xf1\x29\xaf\x6c\xbf\xf2\x92\xe9\xff\xff\x33\xab\x6b\xb2\x29\x8d\xa3\x86\x1c\x99\x8a\x72\xa5\x96\x70\xc7\x5e\xc0\x36\x80\x67\x64\x8d\x4f\x9a\x40\xa3\x69\x47\x6c\xc9\xe7\x2a\x1e\x0b\x95\x41\x65\x6b\x2a\xe0\xf0\xa0\x00\x0c\xf6\xe1\x38\x7a\xcf\x68\x14\x40\x63\x8d\x14\xe0\xae\xf7\xc8\xde\xde\x47\xf6\xd6\xb4\x9a\x7d\x17\x59\xba\xde\x23\xbb\x39\x44\x76\x13\xd4\xcd\xd0\x57\x21\x53\x53\x9d\xd8\xef\xb7\x91\xfd\x41\xae\x9f\x49\xf8\xcc\x6e\xcb\xc8\x6e\x05\x35\x7f\x09\xef\x92\xe0\x9f\x38\xa0\x21\x4f\x91\xae\x9e\x4f\x0a\x2e\x73\xa7\x02\x9e\x71\x16\xf5\x2b\x46\xed\xac\xa3\x59\x85\x2e\xcc\x4f\x27\x72\x7f\x17\xc9\xbd\xfd\x73\x1e\x9f\xb4\xec\xcb\x19\xeb\x64\x6c\xc9\x2b\x80\xc1\x51\xc3\xaf\x05\x0c\x93\x69\xbc\x08\xfc\x10\x35\x48\xb6\x2f\x53\x86\x75\xea\xe6\xc8\xfd\xa0\xb9\x61\xaa\x61\xdd\xf1\x17\x7d\xbd\x77\xd9\xfa\x3e\xa5\x28\x1f\x63\x8a\xd2\x61\xcd\x61\xdd\x50\xcf\x72\x7c\xe8\x91\xe4\xcd\xaa\x7f\x55\x28\x1f\xc3\xe6\x6d\xd8\x98\x30\x82\xb8\x01\xdb\x24\x77\xb4\x3d\x27\x15\xc7\x5d\xf2\x68\x7b\xc6\xd3\xdf\x57\x6e\x7d\x8c\xe8\xfa\x9d\x66\x5b\xf4\x79\x39\x13\x79\x1c\xd0\x7c\xfd\x31\xca\xb4\x9d\xe5\xe8\x4e\x73\x38\x26\x5e\xce\xa7\x2c\x0e\x8d\xd7\x97\xd7\x3c\xa0\x13\x1f\x1e\xe9\xb6\x01\x1f\x91\x1b\x90\x8e\x60\xd1\xfb\x96\xeb\x05\x9c\x51\x8f\x14\xde\xe1\x3c\x90\x3d\x78\x12\x10\x3b\x0b\x53\x4b\x70\x14\xfc\x67\x82\x01\xa5\x9b\xc7\x50\x0d\xa4\xa9\x27\x23\x37\x60\xac\x4c\x05\xac\xe3\x96\xc3\x37\x13\x7a\x95\x5c\x2d\xa7\x27\x7f\xa2\xe9\x4f\x70\x20\x6c\xc9\x88\x5f\x1d\xa8\xb2\xae\xbe\x5e\xe1\x85\xa5\x83\x1d\xbd\x7d\xdb\x68\x3b\xba\x8b\x4e\xae\xa7\x88\x07\xc3\xc1\xaf\x35\x3c\x11\x2c\x26\x7f\x1e\x6c\x0b\xb5\x04\x36\x5e\x08\xeb\x20\x68\xd1\x2e\x2e\xa5\xca\xd0\x62\xc9\x83\x5f\x4c\x53\x08\x1d\xa1\x7e\xc1\x37\x0f\xe8\xfd\xd8\x53\x0d\xe8\xc1\x58\x93\xa5\x06\x73\x95\xce\x85\x02\xc8\xa2\xcc\xa9\xd2\x64\xd9\xd1\x9b\x57\xbf\x03\x00\x00\xff\xff\x25\x4e\x81\x28\x35\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
