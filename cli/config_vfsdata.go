// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 27, 14, 32, 12, 906664785, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2018, 10, 27, 14, 32, 12, 898664711, time.UTC),
			uncompressedSize: 1289,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcd\x72\x9b\x40\x0c\xc7\xef\xfb\x14\x1a\xb8\x06\xdc\x5e\x99\xe9\xc9\x8d\x3b\xae\x33\xa9\xc7\x26\x93\xb3\x02\x02\x94\x2c\xbb\xcc\xae\x70\x3e\x9e\xbe\xb3\xd8\x59\xe8\xa4\x4d\x6f\xac\xf4\x93\xf4\x97\x90\x52\x58\x5b\xd3\x70\x3b\x3a\x14\xb6\x06\x1a\xeb\xa0\x47\x27\x8c\xe6\x0a\xc4\x5a\x3d\x59\x8e\x32\x79\x89\x9c\x07\x6d\x2b\xd4\xfc\x36\x19\x72\x95\xc2\x91\x08\x3a\x91\xc1\x17\xab\x55\xcb\xd2\x8d\x0f\x79\x65\xfb\x95\x97\x4c\x7f\xfd\x62\x56\x97\x64\x53\x1a\x47\x0d\x39\x32\x15\xe5\x4a\xa5\x70\xc3\x5e\xc0\x36\x80\x27\x64\x8d\x0f\x9a\x40\xa3\x69\x47\x6c\xc9\xe7\x2a\x7e\x16\x2a\x83\xca\xd6\x54\xc0\xe1\x4e\x01\x18\xec\xc3\xe7\xe8\x3d\xa3\x51\x00\x8d\x35\x52\x80\xbb\xbc\x23\x7b\x7d\x1b\xd9\x6b\xd3\x6a\xf6\x5d\x64\xe9\xf2\x8e\xec\xe6\x10\xd9\x4d\x50\xb7\x40\x5f\x84\x4c\x4d\xf5\xcc\x7e\xbf\x8e\xec\x0f\x72\xfd\x42\xc2\x47\x76\x5b\x46\x76\x2b\xa8\xf9\x53\x78\x37\x0b\xfe\x89\x03\x1a\xf2\x14\xe9\xea\xf1\x49\xc1\x79\xee\x54\xc0\x23\x2e\xa2\x7e\xc5\xa8\x9d\x75\xb4\xa8\xd0\x85\xf9\xe9\x99\xdc\xdf\x44\x72\x6f\xff\x9c\xc7\x07\x2d\xfb\x72\xc1\x3a\x19\x5b\xf2\x0a\x60\x70\xd4\xf0\x4b\x01\xc3\x64\x1a\xcf\x02\xdf\x45\x0d\x92\xed\xcb\x39\xc3\x7a\xee\xe6\xc8\xfd\xa0\xb9\x61\xaa\x61\xdd\xf1\x27\x7d\xbd\x75\xd9\xfa\x76\x4e\x51\xde\xc7\x14\xa5\xc3\x9a\xc3\xba\xa1\x5e\xe4\x78\xd7\x23\xb3\x37\xab\xfe\x57\xa1\xbc\x0f\x9b\xb7\x61\x63\xc2\x08\xe2\x06\x6c\x67\xb9\xa3\xed\x79\x56\x71\xdc\xcd\x1e\x6d\x4f\xf8\xf4\xef\x95\x5b\x1f\x23\xba\x7e\xa3\xc5\x16\x7d\x5c\xce\x99\x3c\x0e\x68\xfe\xfe\x33\xd2\xe5\xe4\xc4\xa1\xf1\xfa\x7c\xa1\x03\x3a\xf1\xe1\xf0\xb6\x0d\xf8\x88\x5c\x81\x74\x04\x49\xef\x5b\xae\x13\x38\xa1\x1e\x29\xdc\xd6\x32\x90\x3d\x78\x12\x10\xbb\x08\x53\x29\x38\x0a\xfe\x13\xc1\x80\xd2\x2d\x63\xa8\x06\xd2\xd4\x93\x91\x2b\x30\x56\xa6\x02\xd6\x71\xcb\xe1\x3f\x08\xbd\x48\xae\xd2\xe9\x8c\x9f\x68\xba\xee\x03\x61\x4b\x46\xfc\xea\x40\x95\x75\xf5\xe5\x09\xcf\x2c\x1d\xec\xe8\xf5\xdb\x46\xdb\xd1\x9d\x75\x72\x3d\x45\xdc\x19\x0e\x7e\xad\xe1\x81\x20\x99\xfc\x79\xb0\x25\x2a\x05\x36\x5e\x08\xeb\x20\x28\x69\x93\x73\xa9\x32\xb4\x58\xf2\xe0\x93\x69\x0a\xa1\x23\xd4\xcf\xf8\xea\x01\xbd\x1f\x7b\xaa\x01\x3d\x18\x6b\xb2\xb9\xc1\x5c\xcd\xdf\x85\x02\xc8\xa2\xcc\xa9\xd2\x64\xd9\xd1\xab\x57\xbf\x03\x00\x00\xff\xff\x10\x99\x8e\x03\x09\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
