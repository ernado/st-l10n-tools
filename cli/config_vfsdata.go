// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 17, 13, 46, 0, 893352623, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2019, 2, 8, 4, 12, 47, 675711891, time.UTC),
			uncompressedSize: 1471,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe3\x38\x0c\xc6\xef\x7a\x0a\xc2\xb9\xd6\xce\xee\xd5\xc0\x1e\x16\x49\xb3\xcd\xa6\xe8\x04\x89\x8b\x9e\x59\x9b\xb6\xd5\xc8\x92\x21\xd1\xe9\x9f\x47\x9a\xd7\x98\x17\x1b\xc8\x49\x25\x0f\x32\x93\xde\x24\xf1\x47\xea\x13\xfd\x99\x33\x58\x18\x5d\xcb\x66\xb0\xc8\xd2\x68\xa8\x8d\x85\x0e\x2d\x4b\xd4\x37\xc0\xc6\xa8\xf1\x64\xcf\x63\x94\xc8\x3a\x50\xa6\x44\x25\x3f\xc6\x83\x4c\xcc\x60\x4f\x04\x2d\x73\xef\xf2\xf9\xbc\x91\xdc\x0e\xcf\x59\x69\xba\xb9\xe3\x54\xfd\xfd\x97\x9e\x9f\x8b\x8d\x65\x2c\xd5\x64\x49\x97\x94\x09\x31\x83\x7b\xe9\x18\x4c\x0d\x78\x44\xa9\xf0\x59\x11\x28\xd4\xcd\x80\x0d\xb9\x4c\x84\x65\x2e\x52\x28\x4d\x45\x39\xec\x1e\x05\x80\xc6\xce\x2f\x07\xe7\x24\x6a\x01\x50\x1b\xcd\x39\xd8\xf3\x3e\xb0\xb7\x0f\x81\xbd\xd5\x8d\x92\xae\x0d\x2c\x9d\xf7\x81\x5d\xed\x02\xbb\xf2\xea\x26\xe8\x1b\x93\xae\xa8\x8a\xec\xf2\x36\xb0\xff\x91\xed\x26\x12\x2e\xd9\x75\x11\xd8\x35\xa3\x92\x57\xe1\x4d\x14\xfc\x3f\xf6\xa8\xc9\x51\xa0\xcb\x97\x83\x80\x53\xdf\x29\x87\x17\x9c\x64\x7d\x0b\x59\x1b\x63\x69\x72\x43\xeb\xfb\xa7\x22\xb9\xbd\x0f\xe4\xd6\xfc\xda\x8f\x0b\x2d\xdb\x62\xc2\x5a\x1e\x9a\xe1\xc7\x77\x27\x00\x7a\x4b\xb5\x7c\xcb\xa1\x3f\x1d\x9e\x24\x7e\xca\xea\x39\xdd\x16\xb1\xc6\x22\xbe\x67\x2f\xbb\x5e\xc9\x5a\x52\x05\x8b\x56\x5e\x79\xd9\x47\x9b\x2e\x1e\x62\x89\xe2\x29\x94\x28\x2c\x56\xd2\x1b\x0e\xd5\xa4\xc6\xa7\x1e\x8e\xd1\xb4\xfc\xea\x86\xe2\xc9\x7b\x6f\x25\xb5\xf6\x4d\x08\x1e\x58\x47\xb9\x83\xe9\x64\x54\xb1\xdf\xc4\x88\x32\x47\x3c\xfc\xd9\x74\x8b\x7d\x40\x17\x1f\x34\xf1\xd1\xa5\x3d\x23\xb9\xef\x51\x5f\xff\x1c\x45\xf4\x67\x31\xd8\xc3\x14\xbe\x28\xbc\xfc\x37\xb0\xcb\xaf\xea\x3e\x44\x4b\x2c\x07\xbe\x6a\xfb\xbb\xf8\xeb\xdd\x0d\xba\x41\xfb\x3b\x33\x03\xf8\xce\x4e\xbe\x36\x5b\xd4\x4e\x9d\xe6\x4a\x8f\x96\x9d\x1f\x17\xeb\x1a\x5c\x40\x6e\x80\x5b\x82\xa4\x73\x8d\xac\x12\x38\xa2\x1a\xc8\x4f\x84\x69\xa2\x74\xe0\x88\x81\xcd\x24\x4d\xcc\xc0\x92\x8f\x1f\x09\x7a\xe4\x76\x9a\x43\x15\x90\xa2\x8e\x34\xdf\x80\x36\x3c\x5e\x60\xac\x6c\xa4\xf7\x0e\xd3\x1b\x67\x62\x36\x0e\x9f\x03\x8d\x33\x69\x47\xd8\x90\x66\x37\xdf\x51\x69\x6c\x75\xde\xc2\xab\xe4\x16\x36\xf4\xfe\xcf\x4a\x99\xc1\x9e\x74\xca\x6a\xcc\x78\xd4\xd2\xc7\x95\x82\x67\x82\x64\x8c\x67\xfe\x2c\x11\x33\x90\xda\x31\x61\xe5\x05\x25\x4d\x72\xba\xaa\xf0\x4f\x2c\x64\xef\x92\xb1\x0b\xfe\x45\xa8\x5e\xf1\xdd\x01\x3a\x37\x74\x54\x01\x3a\xd0\x46\xa7\xf1\x81\x99\x88\xeb\x5c\x00\xa4\x41\xe6\x78\xd3\x78\xb2\xa1\x77\x27\x7e\x06\x00\x00\xff\xff\x51\x6b\x5e\x4d\xbf\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
