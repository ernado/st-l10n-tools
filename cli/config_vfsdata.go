// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config statically implements the virtual filesystem provided to vfsgen.
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 13, 20, 12, 10, 744126426, time.UTC),
		},
		"/martian.yml": &vfsgen۰CompressedFileInfo{
			name:             "martian.yml",
			modTime:          time.Date(2018, 11, 13, 20, 12, 10, 304124354, time.UTC),
			uncompressedSize: 1334,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xe3\x38\x0c\xc7\xef\x7a\x0a\x22\xb9\xd6\xce\xee\xd5\xc0\x9e\xb2\xcd\x20\x93\xa2\x13\x24\x2e\x7a\x66\x6d\xda\x66\x23\x4b\x86\x44\xa7\x1f\x4f\x3f\x90\x93\x4a\x1e\x74\xa6\x73\x93\xc8\x1f\xc9\x3f\x69\xca\x4b\x58\x5b\xd3\x70\x3b\x3a\x14\xb6\x06\x1a\xeb\xa0\x47\x27\x8c\xe6\x06\xc4\x5a\x3d\x59\x8e\x32\x79\x89\x9c\x07\x6d\x2b\xd4\xfc\x3e\x19\x72\xb5\x84\x23\x11\x74\x22\x83\x2f\x56\xab\x96\xa5\x1b\x9f\xf2\xca\xf6\x2b\x2f\x99\xfe\xf7\x1f\xb3\xba\x26\x9b\xd2\x38\x6a\xc8\x91\xa9\x28\x57\x6a\x09\x77\xec\x05\x6c\x03\x78\x46\xd6\xf8\xa4\x09\x34\x9a\x76\xc4\x96\x7c\xae\xe2\xb1\x50\x19\x54\xb6\xa6\x02\x0e\x0f\x0a\xc0\x60\x1f\x8e\xa3\xf7\x8c\x46\x01\x34\xd6\x48\x01\xee\x7a\x8f\xec\xed\x7d\x64\x6f\x4d\xab\xd9\x77\x91\xa5\xeb\x3d\xb2\x9b\x43\x64\x37\x41\xdd\x0c\x7d\x15\x32\x35\xd5\x89\xfd\xff\x36\xb2\xdf\xc8\xf5\x33\x09\x9f\xd9\x6d\x19\xd9\xad\xa0\xe6\x2f\xe1\x5d\x12\xfc\x1d\x07\x34\xe4\x29\xd2\xd5\xf3\x49\xc1\x65\xee\x54\xc0\x33\xce\xa2\x7e\xc4\xa8\x9d\x75\x34\xab\xd0\x85\xf9\xe9\x44\xee\xef\x22\xb9\xb7\xbf\xce\xe3\x93\x96\x7d\x39\x63\x9d\x8c\x2d\x79\x05\x30\x38\x6a\xf8\xb5\x80\x61\x32\x8d\x17\x81\x1f\xa2\x06\xc9\xf6\x65\xca\xb0\x4e\xdd\x1c\xb9\x1f\x34\x37\x4c\x35\xac\x3b\xfe\xa2\xaf\xf7\x2e\x5b\xdf\xa7\x14\xe5\x63\x4c\x51\x3a\xac\x39\xac\x1b\xea\x59\x8e\x0f\x3d\x92\xbc\x59\xf5\xb7\x0a\xe5\x63\xd8\xbc\x0d\x1b\x13\x46\x10\x37\x60\x9b\xe4\x8e\xb6\xe7\xa4\xe2\xb8\x4b\x1e\x6d\xcf\x78\xfa\xf3\xca\xad\x8f\x11\x5d\xbf\xd3\x6c\x8b\x3e\x2f\x67\x22\x8f\x03\x9a\xaf\x3f\x46\x99\xb6\xb3\x1c\xdd\xe9\xf7\xf0\x72\x3e\x66\x71\x68\xbc\xbe\x3c\xe7\x01\x9d\xf8\xf0\x4a\xb7\x0d\xf8\x88\xdc\x80\x74\x04\x8b\xde\xb7\x5c\x2f\xe0\x8c\x7a\xa4\xf0\x10\xe7\x81\xec\xc1\x93\x80\xd8\x59\x98\x5a\x82\xa3\xe0\x3f\x13\x0c\x28\xdd\x3c\x86\x6a\x20\x4d\x3d\x19\xb9\x01\x63\x65\x2a\x60\x1d\xb7\x1c\x3e\x9a\xd0\xab\xe4\x6a\x39\xbd\xf9\x13\x4d\xbf\x82\x03\x61\x4b\x46\xfc\xea\x40\x95\x75\xf5\xf5\x0a\x2f\x2c\x1d\xec\xe8\xed\xbf\x8d\xb6\xa3\xbb\xe8\xe4\x7a\x8a\x78\x30\x1c\xfc\x5a\xc3\x13\xc1\x62\xf2\xe7\xc1\xb6\x50\x4b\x60\xe3\x85\xb0\x0e\x82\x16\xed\xe2\x52\xaa\x0c\x2d\x96\x3c\xf8\xc5\x34\x85\xd0\x11\xea\x17\x7c\xf3\x80\xde\x8f\x3d\xd5\x80\x1e\x8c\x35\x59\x6a\x30\x57\xe9\x5c\x28\x80\x2c\xca\x9c\x2a\x4d\x96\x1d\xbd\x79\xf5\x33\x00\x00\xff\xff\x5d\x32\xc6\xaa\x36\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/martian.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
